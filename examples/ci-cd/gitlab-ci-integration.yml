# GitLab CI - Laravel Devtoolbox Integration
# Add this to your .gitlab-ci.yml file

stages:
  - build
  - quality
  - performance
  - documentation

variables:
  MYSQL_ROOT_PASSWORD: root
  MYSQL_DATABASE: laravel_test
  MYSQL_USER: laravel
  MYSQL_PASSWORD: laravel

# Build stage
build:
  stage: build
  image: php:8.3-cli
  before_script:
    - apt-get update -qq && apt-get install -y -qq git curl libmcrypt-dev libjpeg-dev libpng-dev libfreetype6-dev libbz2-dev libzip-dev
    - curl -sS https://getcomposer.org/installer | php
    - php composer.phar install --no-dev --no-scripts
  script:
    - echo "Build completed"
  artifacts:
    paths:
      - vendor/
    expire_in: 1 hour

# Quality Gates with Laravel Devtoolbox
devtoolbox:quality:
  stage: quality
  image: php:8.3-cli
  dependencies:
    - build
  before_script:
    - cp .env.example .env
    - php artisan key:generate
    - touch database/database.sqlite
  script:
    # Create reports directory
    - mkdir -p reports
    
    # Quality Gate 1: Unused routes check
    - echo "🔍 Checking for unused routes..."
    - UNUSED_ROUTES=$(php artisan dev:routes:unused --format=count | jq -r '.count // 0')
    - echo "Found $UNUSED_ROUTES unused routes"
    - |
      if [ "$UNUSED_ROUTES" -gt 15 ]; then
        echo "❌ Too many unused routes: $UNUSED_ROUTES"
        echo "Please clean up unused routes before merging"
        exit 1
      fi
    
    # Quality Gate 2: Model analysis
    - echo "📊 Analyzing models..."
    - php artisan dev:models --format=json --output=reports/models.json
    - ORPHAN_MODELS=$(jq '[.data[] | select(.relationships | length == 0)] | length' reports/models.json)
    - echo "Found $ORPHAN_MODELS models without relationships"
    
    # Quality Gate 3: Environment consistency
    - echo "⚙️ Checking environment consistency..."
    - |
      if [ -f ".env.example" ]; then
        php artisan dev:env:diff --against=.env.example --format=json --output=reports/env-diff.json
        MISSING_VARS=$(jq '[.missing_in_env // []] | length' reports/env-diff.json)
        if [ "$MISSING_VARS" -gt 0 ]; then
          echo "❌ Environment inconsistencies found"
          jq -r '.missing_in_env[]? | "Missing: " + .' reports/env-diff.json
          exit 1
        fi
      fi
    
    # Generate comprehensive scan
    - echo "📋 Generating comprehensive application scan..."
    - php artisan dev:scan --all --format=json --output=reports/full-scan.json
    
    # Generate quality summary
    - |
      cat > reports/quality-summary.md << EOF
      # GitLab CI Quality Summary
      
      **Pipeline:** $CI_PIPELINE_ID
      **Branch:** $CI_COMMIT_REF_NAME
      **Commit:** $CI_COMMIT_SHA
      
      ## Quality Metrics
      - **Unused Routes:** $UNUSED_ROUTES
      - **Models without relationships:** $ORPHAN_MODELS
      - **Environment consistency:** $(if [ "$MISSING_VARS" -eq 0 ]; then echo "✅ Consistent"; else echo "❌ Issues found"; fi)
      
      ## Files Generated
      - Full application scan: reports/full-scan.json
      - Models analysis: reports/models.json
      - Environment diff: reports/env-diff.json
      
      EOF
    
    - echo "✅ Quality analysis complete"
  artifacts:
    reports:
      junit: reports/quality-summary.md
    paths:
      - reports/
    expire_in: 1 week
  only:
    - merge_requests
    - main
    - develop

# Performance monitoring
devtoolbox:performance:
  stage: performance
  image: php:8.3-cli
  dependencies:
    - build
  services:
    - mysql:8.0
  before_script:
    - cp .env.example .env
    - php artisan key:generate
    - php artisan migrate --force
  script:
    - mkdir -p performance
    
    # Define critical routes to test
    - CRITICAL_ROUTES=("home" "api.users.index" "dashboard")
    
    # Test each critical route
    - |
      for route in "${CRITICAL_ROUTES[@]}"; do
        if php artisan route:list --name="$route" &>/dev/null; then
          echo "🔎 Testing route: $route"
          php artisan dev:sql:trace --route="$route" --output="performance/$route.json" || echo "⚠️ Failed to test $route"
        else
          echo "⏭️ Route $route not found, skipping"
        fi
      done
    
    # Generate performance summary
    - |
      TOTAL_FILES=$(ls performance/*.json 2>/dev/null | wc -l)
      if [ "$TOTAL_FILES" -gt 0 ]; then
        echo "📊 Performance test summary:"
        echo "Routes tested: $TOTAL_FILES"
        
        for file in performance/*.json; do
          ROUTE=$(basename "$file" .json)
          TOTAL_TIME=$(jq -r '.data.total_time // 0' "$file")
          QUERY_COUNT=$(jq -r '.data.total_queries // 0' "$file")
          echo "  - $ROUTE: ${TOTAL_TIME}ms, $QUERY_COUNT queries"
        done
      else
        echo "⚠️ No performance data collected"
      fi
  artifacts:
    paths:
      - performance/
    expire_in: 3 days
  only:
    - merge_requests
    - main

# Documentation generation
devtoolbox:docs:
  stage: documentation
  image: php:8.3-cli
  dependencies:
    - build
  before_script:
    - cp .env.example .env
    - php artisan key:generate
    - touch database/database.sqlite
  script:
    - mkdir -p docs/generated
    
    # Generate model documentation
    - echo "📚 Generating model documentation..."
    - php artisan dev:models --format=json --output=docs/generated/models.json
    - php artisan dev:model:graph --format=mermaid --output=docs/generated/models.mmd
    
    # Generate route documentation
    - echo "🛣️ Generating route documentation..."
    - php artisan dev:routes --format=json --output=docs/generated/routes.json
    
    # Generate service documentation
    - echo "⚙️ Generating service documentation..."
    - php artisan dev:services --format=json --output=docs/generated/services.json
    
    # Generate comprehensive documentation
    - echo "📖 Generating comprehensive documentation..."
    - php artisan dev:scan --all --format=json --output=docs/generated/application-structure.json
    
    # Create documentation index
    - |
      cat > docs/generated/README.md << EOF
      # Auto-Generated Documentation
      
      **Generated:** $(date)
      **Branch:** $CI_COMMIT_REF_NAME
      **Commit:** $CI_COMMIT_SHA
      
      ## Available Documentation
      
      - [Models](models.json) - All Eloquent models and relationships
      - [Model Diagram](models.mmd) - Visual relationship diagram
      - [Routes](routes.json) - All application routes
      - [Services](services.json) - Service container bindings
      - [Full Structure](application-structure.json) - Complete application scan
      
      ## Usage
      
      ### View Model Diagram
      Copy the contents of \`models.mmd\` and paste into [Mermaid Live](https://mermaid.live/)
      
      ### Process JSON Data
      Use tools like \`jq\` to query the JSON files:
      
      \`\`\`bash
      # Find models with many relationships
      jq '.data[] | select(.relationships | length > 5)' models.json
      
      # List API routes
      jq '.data[] | select(.uri | startswith("api/"))' routes.json
      \`\`\`
      
      EOF
    
    - echo "✅ Documentation generation complete"
  artifacts:
    paths:
      - docs/generated/
    expire_in: 1 month
  only:
    - main
    - develop

# Notification job
notify:success:
  stage: documentation
  image: alpine:latest
  dependencies:
    - devtoolbox:quality
  before_script:
    - apk add --no-cache curl jq
  script:
    - |
      if [ -f "reports/quality-summary.md" ]; then
        echo "📊 Quality analysis completed successfully"
        echo "Reports available in pipeline artifacts"
      fi
  only:
    - main
    - develop