#!/bin/bash

# Laravel Devtoolbox - Security Audit Script
# This script performs a comprehensive security analysis of your Laravel application

set -e

echo "🔐 Starting Laravel application security audit..."
echo "================================================"

# Create output directory
mkdir -p security-audit/$(date +%Y%m%d)
OUTPUT_DIR="security-audit/$(date +%Y%m%d)"

# 1. Scan for unprotected routes
echo "🔍 Scanning for unprotected routes..."
php artisan dev:security:unprotected-routes --format=json --output="$OUTPUT_DIR/unprotected-routes.json"

UNPROTECTED_COUNT=$(php artisan dev:security:unprotected-routes --format=json | jq '.data | length')
echo "   Found $UNPROTECTED_COUNT potentially unprotected routes"

# 2. Critical security issues only
echo "🚨 Checking for critical security issues..."
php artisan dev:security:unprotected-routes --critical-only --format=json --output="$OUTPUT_DIR/critical-security-issues.json"

CRITICAL_COUNT=$(php artisan dev:security:unprotected-routes --critical-only --format=json | jq '.data | length')
echo "   Found $CRITICAL_COUNT critical security issues"

# 3. Route analysis (to understand middleware usage)
echo "📍 Analyzing route middleware configuration..."
php artisan dev:routes --format=json --output="$OUTPUT_DIR/routes-analysis.json"

# 4. Middleware analysis
echo "🛡️ Analyzing middleware configuration..."
php artisan dev:middleware --format=json --output="$OUTPUT_DIR/middleware-analysis.json"

# 5. Generate summary report
echo "📊 Generating security summary..."

cat > "$OUTPUT_DIR/security-summary.md" << EOF
# Security Audit Report - $(date +%Y-%m-%d)

## Summary

- **Unprotected Routes**: $UNPROTECTED_COUNT
- **Critical Issues**: $CRITICAL_COUNT
- **Audit Date**: $(date)

## Critical Security Issues

$(if [ $CRITICAL_COUNT -gt 0 ]; then echo "⚠️ **ATTENTION**: $CRITICAL_COUNT critical security issues found!"; else echo "✅ No critical security issues detected."; fi)

## Recommendations

$(if [ $UNPROTECTED_COUNT -gt 0 ]; then cat << 'RECS'
### Review Unprotected Routes
- Check if unprotected routes should require authentication
- Consider adding appropriate middleware (auth, verified, etc.)
- Review API endpoints for proper authentication

RECS
fi)

$(if [ $CRITICAL_COUNT -gt 0 ]; then cat << 'CRITICAL'
### Critical Issues Require Immediate Attention
- Review critical-security-issues.json for details
- Implement proper authentication middleware
- Consider rate limiting for public endpoints

CRITICAL
fi)

## Files Generated

- \`unprotected-routes.json\` - All potentially unprotected routes
- \`critical-security-issues.json\` - Critical security issues
- \`routes-analysis.json\` - Complete route analysis
- \`middleware-analysis.json\` - Middleware configuration
- \`security-summary.md\` - This summary report

## Next Steps

1. Review the JSON files for detailed information
2. Implement security fixes for critical issues
3. Add appropriate middleware to unprotected routes
4. Re-run this audit after making changes

---
Generated by Laravel Devtoolbox Security Audit
EOF

# 6. Display results
echo ""
echo "📋 Security Audit Results:"
echo "=========================="
echo "Unprotected routes: $UNPROTECTED_COUNT"
echo "Critical issues: $CRITICAL_COUNT"
echo ""

if [ $CRITICAL_COUNT -gt 0 ]; then
    echo "🚨 CRITICAL: $CRITICAL_COUNT critical security issues found!"
    echo "   Please review $OUTPUT_DIR/critical-security-issues.json immediately."
    echo ""
fi

if [ $UNPROTECTED_COUNT -gt 10 ]; then
    echo "⚠️  WARNING: High number of unprotected routes ($UNPROTECTED_COUNT)"
    echo "   Consider reviewing your authentication strategy."
    echo ""
fi

echo "📁 Reports saved to: $OUTPUT_DIR/"
echo "📄 Summary report: $OUTPUT_DIR/security-summary.md"

# 7. Exit with appropriate code for CI/CD
if [ $CRITICAL_COUNT -gt 0 ]; then
    echo ""
    echo "❌ Security audit failed due to critical issues"
    exit 1
fi

echo ""
echo "✅ Security audit completed successfully"
exit 0