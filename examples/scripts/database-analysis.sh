#!/bin/bash

# Laravel Devtoolbox - Database Analysis Script
# This script performs comprehensive database column usage analysis

set -e

echo "🗄️ Starting Laravel database analysis..."
echo "========================================"

# Create output directory
mkdir -p database-analysis/$(date +%Y%m%d)
OUTPUT_DIR="database-analysis/$(date +%Y%m%d)"

# 1. Full database column usage analysis
echo "📊 Analyzing database column usage across all tables..."
php artisan dev:db:column-usage --format=json --output="$OUTPUT_DIR/column-usage-full.json"

# 2. Find unused columns only
echo "🔍 Identifying unused database columns..."
php artisan dev:db:column-usage --unused-only --format=json --output="$OUTPUT_DIR/unused-columns.json"

UNUSED_COUNT=$(php artisan dev:db:column-usage --unused-only --format=json | jq '.data | length // 0')
echo "   Found $UNUSED_COUNT potentially unused columns"

# 3. Exclude system tables and analyze user tables only
echo "👥 Analyzing user-defined tables (excluding system tables)..."
php artisan dev:db:column-usage \
    --exclude=migrations \
    --exclude=sessions \
    --exclude=jobs \
    --exclude=failed_jobs \
    --exclude=password_resets \
    --exclude=personal_access_tokens \
    --format=json \
    --output="$OUTPUT_DIR/user-tables-analysis.json"

# 4. Analyze specific important tables if they exist
echo "🎯 Analyzing critical business tables..."
CRITICAL_TABLES=("users" "orders" "products" "posts" "articles")
for table in "${CRITICAL_TABLES[@]}"; do
    # Check if table analysis is available in the full report
    TABLE_EXISTS=$(jq -r ".data[] | select(.table_name == \"$table\") | .table_name" "$OUTPUT_DIR/column-usage-full.json" 2>/dev/null || echo "")
    if [ ! -z "$TABLE_EXISTS" ]; then
        echo "   Analyzing $table table..."
        php artisan dev:db:column-usage --table=$table --format=json --output="$OUTPUT_DIR/table-$table-analysis.json"
    fi
done

# 5. Generate analysis summary
echo "📋 Generating database analysis summary..."

TOTAL_TABLES=$(jq '.data | length' "$OUTPUT_DIR/column-usage-full.json")
TOTAL_COLUMNS=$(jq '[.data[].columns[]] | length' "$OUTPUT_DIR/column-usage-full.json")

cat > "$OUTPUT_DIR/database-summary.md" << EOF
# Database Analysis Report - $(date +%Y-%m-%d)

## Summary Statistics

- **Total Tables Analyzed**: $TOTAL_TABLES
- **Total Columns Analyzed**: $TOTAL_COLUMNS
- **Unused Columns Found**: $UNUSED_COUNT
- **Analysis Date**: $(date)

## Database Health Score

$(if [ $UNUSED_COUNT -eq 0 ]; then
    echo "🟢 **Excellent** - No unused columns detected"
elif [ $UNUSED_COUNT -le 5 ]; then
    echo "🟡 **Good** - Minimal unused columns ($UNUSED_COUNT)"
elif [ $UNUSED_COUNT -le 15 ]; then
    echo "🟠 **Fair** - Some cleanup opportunities ($UNUSED_COUNT unused columns)"
else
    echo "🔴 **Needs Attention** - Significant unused columns ($UNUSED_COUNT)"
fi)

## Key Findings

$(if [ $UNUSED_COUNT -gt 0 ]; then cat << 'FINDINGS'
### Unused Columns Detected
- Found columns that may not be referenced in the codebase
- Review \`unused-columns.json\` for detailed analysis
- Consider database cleanup after verification

FINDINGS
fi)

### Table Analysis
- Complete column usage analysis available in \`column-usage-full.json\`
- User tables analyzed separately in \`user-tables-analysis.json\`
- Critical business tables analyzed individually

## Recommendations

$(if [ $UNUSED_COUNT -gt 0 ]; then cat << 'RECS'
### Database Cleanup
1. Review unused columns in \`unused-columns.json\`
2. Verify columns are truly unused (check raw SQL, external tools)
3. Consider deprecation strategy for unused columns
4. Create migration to remove confirmed unused columns

RECS
fi)

### Optimization Opportunities
1. Review heavily used columns for proper indexing
2. Consider database normalization for tables with many columns
3. Analyze fillable/guarded model attributes alignment
4. Review migration patterns for consistency

## Files Generated

- \`column-usage-full.json\` - Complete database analysis
- \`unused-columns.json\` - Unused columns only
- \`user-tables-analysis.json\` - User tables analysis
- \`table-*-analysis.json\` - Individual table analyses
- \`database-summary.md\` - This summary report

## Usage Insights

$(jq -r '.data[] | "- **\(.table_name)**: \(.columns | length) columns, \([.columns[] | select(.used == false)] | length) unused"' "$OUTPUT_DIR/column-usage-full.json" | head -10)

$(if [ $(jq '.data | length' "$OUTPUT_DIR/column-usage-full.json") -gt 10 ]; then echo "  ... and $((TOTAL_TABLES - 10)) more tables"; fi)

## Next Steps

1. Review detailed JSON files for specific column information
2. Validate unused columns in staging environment
3. Plan database cleanup migrations
4. Re-run analysis after cleanup

---
Generated by Laravel Devtoolbox Database Analysis
EOF

# 6. Display results
echo ""
echo "📊 Database Analysis Results:"
echo "============================"
echo "Total tables: $TOTAL_TABLES"
echo "Total columns: $TOTAL_COLUMNS"
echo "Unused columns: $UNUSED_COUNT"
echo ""

if [ $UNUSED_COUNT -gt 20 ]; then
    echo "⚠️  WARNING: High number of unused columns ($UNUSED_COUNT)"
    echo "   Consider database cleanup to improve performance and maintainability."
    echo ""
elif [ $UNUSED_COUNT -gt 0 ]; then
    echo "💡 INFO: $UNUSED_COUNT unused columns found"
    echo "   Review for potential cleanup opportunities."
    echo ""
else
    echo "✅ No unused columns detected - database looks clean!"
    echo ""
fi

echo "📁 Reports saved to: $OUTPUT_DIR/"
echo "📄 Summary report: $OUTPUT_DIR/database-summary.md"

# 7. Generate quick stats for CI/CD
echo ""
echo "📈 Quick Stats (for CI/CD):"
echo "unused_columns=$UNUSED_COUNT"
echo "total_tables=$TOTAL_TABLES"
echo "total_columns=$TOTAL_COLUMNS"

echo ""
echo "✅ Database analysis completed successfully"
exit 0